import {Fraction } from "#utils/general";

export default (
    () => {
        var
            p = Fraction.parse.bind(Fraction),
    
            res = [
                "1.5", // 0
                "-0.75", // 1
                "1.5625", // 2
                "Infinity", // 3
                "0.625", // 4
                "-3.75", // 5
                "3.14159", // 6
                "0.025", // 7
                "-4.75", // 8
                "16", // 9
                "2", // 10
                "8", // 11
                "0.375", // 12
                "-0.9000009000009000009000009000009000009000009000009", // 13
                "0.857142857142857142857142857142857142857142857142857", // 14
                "0.833333333333333333333333333333333333333333333333333", // 15
                "10000000", // 16
                "0", // 17
                "2.56", // 18
                "1.500007499962500187499062504687476562617186914065429", // 19
                "100000", // 20

                "3", // 21
                "1.333333333333333333333333333333333333333333333333333", // 22
                "0.5", // 23
                "Infinity", // 24
                "-1", // 25
                "1.2", // 26
                "2.5", // 27
                "-2.45", // 28
                "1", // 29
                "5", // 30
                "1", // 31
                "0.833333333333333333333333333333333333333333333333333", // 32
                "-0.28", // 33
                "12.8", // 34
                "-3.000300030003000300030003000300030003000300030003", // 35
                "0.833333333333333333333333333333333333333333333333333", // 36
                "5000000", // 37
                "0.5", // 38
                "2",  // 39
                "200000", // 40
                "15.00015000150001500015000150001500015000150001500015", // 41

                "0.101", // 42
                "0.04", // 43
                "-1.815181518151815181518151815181518151815181518151815", // 44
                "51", // 45

                "0.124999999845312500175957031049848877180796902206843", // 46
                "0.000000001", // 47
                "-Infinity", // 48
                "-1" // 49
            ],
    
            calls = 0
        ;
        calls = (
            [
                ["3","2"], // 0
                ["-3", "4"], // 1
                ["1.25", "0.8"], // 2
                ["5", "0"],  // 3
                ["-2.5", "-4"], // 4
                ["7.5", "-2"], // 5

                ["3.14159", "1"], // 6

                ["0.25", "10"], // 7

                ["4.75", "-1"], // 8

                ["8", "0.5"], // 9
                ["4", "2"], // 10
                ["6", "0.75"], // 11
                ["1.5", "4"], // 12
                ["3","-3.33333"], // 13
                ["6", "7"], // 14
                ["2.5","3"], // 15
                ["1000000","0.1"], // 16
                ["0","1.5"], // 17
                ["3.2","1.25"], // 18
                ["1.00001","0.66667"], // 19
                ["10","0.0001"], // 20

                ["9","3"], // 21
                ["-4","-3"], // 22
                ["0.25","0.5"], // 23
                ["7","0"], // 24
                ["-8","8"], // 25
                ["6","5"], // 26
                ["5","2"], // 27
                ["-4.9","2"], // 28
                ["5.0","5.0"], // 29
                ["1","0.2"], // 30
                ["2.5","2.5"], // 31
                ["4.5","5.4"], // 32
                ["-7","25"], // 33
                ["25.6","2.0"], // 34
                ["1","-0.3333"], // 35
                ["2.5","3"], // 36
                ["500000","0.1"], // 37
                ["4","8"], // 38
                ["4","2"], // 39
                ["10","0.00005"], // 40
                ["5","0.33333"], // 41

                ["0.1111","1.1"], // 42
                ["5000","125000"], // 43
                ["5.50","-3.03"], // 44
                ["051","1"], // 45

                ["123456789.987654321","987654321.123456789"], // 46
                ["0.000000001","1"], // 47
                ["-5000000000","0"], // 48
                ["-0.00001","0.00001"], // 49
            ]
            .reduce((count, rs, i) => {
                var
                    value = p(rs[0]),

                    first = value.toString(),
                    second = p(rs[1]).toString(),
    
                    newRes = (
                        (
                            value['/'](rs[1] , 50)
                            
                            .is(
                                res[
                                    i
                                ]
                            )
                        )
                    )
                ;

                newRes
                ||
                console.dir({
                    title: "wrong",
                    i,
                    first,
                    second,
                    original: rs,
                    newRes,
                    text: `${value} !== ${res[i]}`
                })
                
                return (
                    count + Number(newRes)
                )
            }, 0)
        );
        
        return (
            console.log(`[ ${calls} / ${res.length} ]`)
        );
    }
)
